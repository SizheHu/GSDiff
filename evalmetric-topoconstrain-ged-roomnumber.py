import os
import random
from itertools import cycle

from torch.utils.data import Dataset, DataLoader
from tqdm import *
import networkx as nx
from gsdiff_topo.utils import *


# 3.9 2.59

'''This is used to calculate the graph edit distance of the results inferred under the topological graph constraints and statistical analysis of each room category.'''

import numpy as np

# Define the node substitution cost function
def node_subst_cost(node1_attr, node2_attr):
    room_type1 = node1_attr.get('room_type')
    room_type2 = node2_attr.get('room_type')
    return 0 if room_type1 == room_type2 else 1


def compute_adjacency_matrix(simple_cycles):
    simple_cycles_2d = [[tpl[:2] for tpl in p] for p in simple_cycles]
    # print(simple_cycles_2d)

    def check_common_edges(polygons):
        def get_edges(polygon):
            # Create a collection to store the edges of the polygon, where each edge is represented as a tuple with vertices in ascending order to eliminate directionality.
            return {(min(polygon[i], polygon[(i + 1) % len(polygon)]), max(polygon[i], polygon[(i + 1) % len(polygon)]))
                    for i in range(len(polygon))}

        def have_common_edge(edges1, edges2):
            # Returns True if the intersection of the two sets of edges is non-empty
            return not edges1.isdisjoint(edges2)

        # Get the edges of each polygon
        edges_per_polygon = [get_edges(polygon) for polygon in polygons]

        # Initialize the adjacency matrix
        num_polygons = len(polygons)
        adjacency_matrix = [[0] * num_polygons for _ in range(num_polygons)]

        # Check if each pair of polygons has a common edge
        for i in range(num_polygons):
            for j in range(i + 1, num_polygons):
                if have_common_edge(edges_per_polygon[i], edges_per_polygon[j]):
                    adjacency_matrix[i][j] = 1
                    adjacency_matrix[j][i] = 1

        return adjacency_matrix

    # Calculate the adjacency matrix
    adjacency_matrix = check_common_edges(simple_cycles_2d)
    # print(adjacency_matrix)
    # assert 0
    return adjacency_matrix



class RPlanGEdgeSemanSimplified(Dataset):
    '''
    hould have storaged data without padding, augmentation and normalization in advance.
   data is graphs, (V, E), V has attributes(coords, ...), E has adjacency matrices.
   (although we use ordered data structure like ndarray, we only use the order in adjacency matrices(instead of adjacency lists)
   to facilitate the data loading. we don't use the order in nn, to meet permutation invariability of graph nodes.)
    '''
    def __init__(self, mode):
        super().__init__()
        self.mode = mode
        '''train(65763) & val(3000) & test(3000)'''
        if self.mode == 'train':
            self.files = os.listdir('./datasets/rplang-v3-withsemantics/train')
        elif self.mode == 'val':
            self.files = os.listdir('./datasets/rplang-v3-withsemantics/val')
        elif self.mode == 'test':
            self.files = os.listdir('./datasets/rplang-v3-withsemantics/test')
        else:
            assert 0, 'mode error'
        self.files = sorted(self.files, key=lambda x: int(x[:-4]), reverse=False)

    def __len__(self):
        '''return len(dataset)'''
        return len(self.files)

    def __getitem__(self, index):
        '''(1)get ndarray item by index.
          (2)random augmentation.
          return all unbatched things in ndarray in a dict'''

        if self.mode == 'train':
            graph = np.load('./datasets/rplang-v3-withsemantics/train/' + self.files[index], allow_pickle=True).item()
        elif self.mode == 'val':
            graph = np.load('./datasets/rplang-v3-withsemantics/val/' + self.files[index], allow_pickle=True).item()
        elif self.mode == 'test':
            graph = np.load('./datasets/rplang-v3-withsemantics/test/' + self.files[index], allow_pickle=True).item()
        else:
            assert 0, 'mode error'

        '''coords_withsemantics, (53, 16)'''
        corners_withsemantics = graph['corner_list_np_normalized_padding_withsemantics']
        corners_withsemantics_simplified = np.zeros((corners_withsemantics.shape[0], 9))
        corners_withsemantics_simplified[:, 0:2] = corners_withsemantics[:, 0:2]
        corners_withsemantics_simplified[:, 2] = (corners_withsemantics[:, [2, 6, 12]]).sum(axis=1)
        corners_withsemantics_simplified[:, 3] = (corners_withsemantics[:, [3, 7, 8, 9, 10]]).sum(axis=1)
        corners_withsemantics_simplified[:, 4] = (corners_withsemantics[:, [13, 14]]).sum(axis=1)
        corners_withsemantics_simplified[:, 5] = corners_withsemantics[:, 4]
        corners_withsemantics_simplified[:, 6] = corners_withsemantics[:, 5]
        corners_withsemantics_simplified[:, 7] = corners_withsemantics[:, 11]
        corners_withsemantics_simplified[:, 8] = corners_withsemantics[:, 15]

        '''attn 1 matrix, (53, 53)'''
        global_attn_matrix = graph['global_matrix_np_padding'].astype(bool)
        '''corners padding mask, (53, 1)'''
        corners_padding_mask = graph['padding_mask']

        '''edges, (2809, 1)'''
        edges = graph['edges']

        file_id = graph['file_id']

        return corners_withsemantics_simplified, global_attn_matrix, corners_padding_mask, edges, file_id



dataset_test_for_gt_rendering = RPlanGEdgeSemanSimplified('test')
dataloader_test_for_gt_rendering = DataLoader(dataset_test_for_gt_rendering, batch_size=1, shuffle=False, num_workers=0,
                        drop_last=False, pin_memory=True)  # try different num_workers to be faster
dataloader_test_iter_for_gt_rendering = iter(cycle(dataloader_test_for_gt_rendering))


gts = {}
for batch_count in tqdm(range(3000)):
    corners_withsemantics_0_test_batch, global_attn_matrix_test_batch, corners_padding_mask_test_batch, edges_test_batch, \
    file_id_test_batch = next(dataloader_test_iter_for_gt_rendering)
    for i in range(corners_withsemantics_0_test_batch.shape[0]):
        test_count = batch_count * 1 + i
        corners_withsemantics_0_test = corners_withsemantics_0_test_batch[i][None, :, :]
        global_attn_matrix_test = global_attn_matrix_test_batch[i][None, :, :]
        corners_padding_mask_test = corners_padding_mask_test_batch[i][None, :, :]
        edges_test = edges_test_batch[i][None, :, :]
        file_id_test = file_id_test_batch[i].item()


        corners_withsemantics_0_test = corners_withsemantics_0_test.clamp(-1, 1).cpu().numpy()
        corners_0_test = (corners_withsemantics_0_test[0, :, :2] * (512 // 2) + (512 // 2)).astype(int)
        semantics_0_test = corners_withsemantics_0_test[0, :, 2:].astype(int)
        global_attn_matrix_test = global_attn_matrix_test.cpu().numpy()
        corners_padding_mask_test = corners_padding_mask_test.cpu().numpy()
        edges_test = edges_test.cpu().numpy()
        corners_0_test_depadded = corners_0_test[corners_padding_mask_test.squeeze() == 1][None, :, :]  # (n, 2)
        semantics_0_test_depadded = semantics_0_test[corners_padding_mask_test.squeeze() == 1][None, :, :]  # (n, 7)
        edges_test_depadded = edges_test[global_attn_matrix_test.reshape(1, -1, 1)][None, :, None]
        edges_test_depadded = np.concatenate((1 - edges_test_depadded, edges_test_depadded), axis=2)

        ''' get planar cycles'''
        # ndarray of shape (1, n, 14) containing 0s and 1s; find the index of each subarray where a 1 is located, and replace the original element with a value of 0 with 99999
        semantics_gt_i_transform_test = semantics_0_test_depadded
        semantics_gt_i_transform_indices_test = np.indices(semantics_gt_i_transform_test.shape)[-1]
        semantics_gt_i_transform_test = np.where(semantics_gt_i_transform_test == 1,
                                                 semantics_gt_i_transform_indices_test, 99999)

        gt_i_points_test = [tuple(corner_with_seman_test) for corner_with_seman_test in
                            np.concatenate((corners_0_test_depadded, semantics_gt_i_transform_test), axis=-1).tolist()[
                                0]]

        gt_i_edges_test = edges_to_coordinates(
            np.triu(edges_test_depadded[0, :, 1].reshape(len(gt_i_points_test), len(gt_i_points_test))).reshape(-1),
            gt_i_points_test)
        # Find all edges and remove duplicates
        gt_i_edges_test_ = [list(p1)[:2] + list(p2)[:2] for (p1, p2) in gt_i_edges_test
                             if (p2, p1) not in gt_i_edges_test]
        # print(output_edges_test)
        d_rev_test, simple_cycles_test, simple_cycles_semantics_test = get_cycle_basis_and_semantic_3_semansimplified(
            gt_i_points_test,
            gt_i_edges_test)
        gts[file_id_test] = [gt_i_points_test, gt_i_edges_test_, d_rev_test, simple_cycles_test, simple_cycles_semantics_test]

# Our 3000 test set sample ids
test_ids_3000 = ['8.npy', '24.npy', '67.npy', '76.npy', '121.npy', '159.npy', '191.npy', '217.npy', '248.npy', '280.npy', '318.npy', '401.npy', '402.npy', '469.npy', '508.npy', '511.npy', '550.npy', '585.npy', '614.npy', '618.npy', '675.npy', '683.npy', '751.npy', '764.npy', '785.npy', '789.npy', '843.npy', '869.npy', '874.npy', '953.npy', '974.npy', '989.npy', '1003.npy', '1006.npy', '1022.npy', '1063.npy', '1083.npy', '1104.npy', '1178.npy', '1267.npy', '1277.npy', '1357.npy', '1432.npy', '1447.npy', '1466.npy', '1480.npy', '1526.npy', '1551.npy', '1559.npy', '1579.npy', '1593.npy', '1603.npy', '1608.npy', '1620.npy', '1663.npy', '1664.npy', '1666.npy', '1708.npy', '1730.npy', '1745.npy', '1747.npy', '1748.npy', '1757.npy', '1771.npy', '1772.npy', '1780.npy', '1786.npy', '1798.npy', '1809.npy', '1829.npy', '1830.npy', '1903.npy', '1943.npy', '1985.npy', '1988.npy', '2006.npy', '2024.npy', '2026.npy', '2038.npy', '2054.npy', '2068.npy', '2090.npy', '2132.npy', '2151.npy', '2213.npy', '2239.npy', '2259.npy', '2262.npy', '2271.npy', '2285.npy', '2340.npy', '2370.npy', '2387.npy', '2401.npy', '2492.npy', '2498.npy', '2534.npy', '2554.npy', '2557.npy', '2626.npy', '2678.npy', '2688.npy', '2839.npy', '2851.npy', '2909.npy', '3010.npy', '3016.npy', '3035.npy', '3064.npy', '3071.npy', '3072.npy', '3086.npy', '3091.npy', '3133.npy', '3156.npy', '3182.npy', '3187.npy', '3215.npy', '3299.npy', '3355.npy', '3373.npy', '3421.npy', '3459.npy', '3460.npy', '3493.npy', '3495.npy', '3497.npy', '3531.npy', '3549.npy', '3551.npy', '3556.npy', '3592.npy', '3652.npy', '3684.npy', '3698.npy', '3706.npy', '3720.npy', '3741.npy', '3773.npy', '3788.npy', '3789.npy', '3803.npy', '3829.npy', '3839.npy', '3845.npy', '3848.npy', '3862.npy', '3880.npy', '4005.npy', '4012.npy', '4040.npy', '4090.npy', '4116.npy', '4130.npy', '4143.npy', '4152.npy', '4164.npy', '4173.npy', '4233.npy', '4240.npy', '4283.npy', '4305.npy', '4328.npy', '4350.npy', '4420.npy', '4460.npy', '4466.npy', '4499.npy', '4510.npy', '4525.npy', '4526.npy', '4544.npy', '4558.npy', '4581.npy', '4644.npy', '4658.npy', '4699.npy', '4710.npy', '4715.npy', '4727.npy', '4738.npy', '4753.npy', '4773.npy', '4795.npy', '4809.npy', '4835.npy', '4842.npy', '4856.npy', '4858.npy', '4861.npy', '4862.npy', '4867.npy', '4903.npy', '4925.npy', '4960.npy', '5038.npy', '5073.npy', '5092.npy', '5094.npy', '5132.npy', '5140.npy', '5164.npy', '5206.npy', '5225.npy', '5235.npy', '5239.npy', '5358.npy', '5381.npy', '5453.npy', '5456.npy', '5469.npy', '5482.npy', '5504.npy', '5524.npy', '5528.npy', '5558.npy', '5584.npy', '5585.npy', '5589.npy', '5621.npy', '5642.npy', '5652.npy', '5669.npy', '5795.npy', '5880.npy', '5925.npy', '5952.npy', '6031.npy', '6201.npy', '6212.npy', '6221.npy', '6243.npy', '6263.npy', '6338.npy', '6361.npy', '6372.npy', '6383.npy', '6398.npy', '6439.npy', '6454.npy', '6455.npy', '6478.npy', '6484.npy', '6505.npy', '6514.npy', '6530.npy', '6572.npy', '6575.npy', '6580.npy', '6679.npy', '6686.npy', '6691.npy', '6706.npy', '6719.npy', '6766.npy', '6792.npy', '6796.npy', '6836.npy', '6842.npy', '6859.npy', '6875.npy', '6882.npy', '6906.npy', '6975.npy', '7016.npy', '7021.npy', '7054.npy', '7098.npy', '7123.npy', '7165.npy', '7186.npy', '7201.npy', '7209.npy', '7210.npy', '7215.npy', '7285.npy', '7304.npy', '7358.npy', '7361.npy', '7363.npy', '7368.npy', '7387.npy', '7403.npy', '7470.npy', '7562.npy', '7583.npy', '7589.npy', '7596.npy', '7640.npy', '7666.npy', '7686.npy', '7708.npy', '7748.npy', '7750.npy', '7773.npy', '7779.npy', '7796.npy', '7818.npy', '7845.npy', '7860.npy', '7864.npy', '7879.npy', '7937.npy', '7955.npy', '7969.npy', '8001.npy', '8004.npy', '8005.npy', '8022.npy', '8024.npy', '8066.npy', '8131.npy', '8187.npy', '8198.npy', '8237.npy', '8262.npy', '8266.npy', '8282.npy', '8320.npy', '8324.npy', '8336.npy', '8351.npy', '8404.npy', '8424.npy', '8450.npy', '8556.npy', '8578.npy', '8593.npy', '8611.npy', '8658.npy', '8659.npy', '8702.npy', '8712.npy', '8743.npy', '8751.npy', '8829.npy', '8862.npy', '8867.npy', '8920.npy', '8923.npy', '8963.npy', '8973.npy', '8975.npy', '9034.npy', '9035.npy', '9079.npy', '9083.npy', '9128.npy', '9130.npy', '9172.npy', '9197.npy', '9213.npy', '9225.npy', '9281.npy', '9287.npy', '9337.npy', '9378.npy', '9383.npy', '9407.npy', '9415.npy', '9428.npy', '9470.npy', '9501.npy', '9548.npy', '9551.npy', '9597.npy', '9656.npy', '9704.npy', '9726.npy', '9733.npy', '9738.npy', '9761.npy', '9825.npy', '9861.npy', '9880.npy', '9891.npy', '9900.npy', '10040.npy', '10057.npy', '10075.npy', '10164.npy', '10174.npy', '10184.npy', '10205.npy', '10299.npy', '10308.npy', '10315.npy', '10356.npy', '10378.npy', '10383.npy', '10419.npy', '10492.npy', '10503.npy', '10510.npy', '10559.npy', '10560.npy', '10607.npy', '10632.npy', '10650.npy', '10672.npy', '10873.npy', '10885.npy', '10901.npy', '10916.npy', '11004.npy', '11011.npy', '11048.npy', '11055.npy', '11085.npy', '11086.npy', '11123.npy', '11124.npy', '11160.npy', '11171.npy', '11195.npy', '11264.npy', '11275.npy', '11303.npy', '11335.npy', '11353.npy', '11378.npy', '11424.npy', '11469.npy', '11515.npy', '11549.npy', '11590.npy', '11610.npy', '11625.npy', '11639.npy', '11690.npy', '11707.npy', '11712.npy', '11721.npy', '11746.npy', '11819.npy', '11872.npy', '11877.npy', '11909.npy', '11918.npy', '11943.npy', '12025.npy', '12046.npy', '12052.npy', '12064.npy', '12145.npy', '12163.npy', '12206.npy', '12211.npy', '12230.npy', '12232.npy', '12270.npy', '12280.npy', '12289.npy', '12300.npy', '12324.npy', '12344.npy', '12389.npy', '12399.npy', '12402.npy', '12415.npy', '12431.npy', '12438.npy', '12515.npy', '12569.npy', '12582.npy', '12597.npy', '12600.npy', '12613.npy', '12647.npy', '12686.npy', '12710.npy', '12711.npy', '12728.npy', '12755.npy', '12766.npy', '12773.npy', '12824.npy', '12844.npy', '12858.npy', '12875.npy', '12882.npy', '12885.npy', '13012.npy', '13017.npy', '13033.npy', '13052.npy', '13161.npy', '13222.npy', '13259.npy', '13266.npy', '13324.npy', '13331.npy', '13373.npy', '13377.npy', '13425.npy', '13428.npy', '13429.npy', '13456.npy', '13472.npy', '13481.npy', '13504.npy', '13508.npy', '13542.npy', '13620.npy', '13652.npy', '13679.npy', '13694.npy', '13703.npy', '13704.npy', '13736.npy', '13755.npy', '13807.npy', '13876.npy', '13905.npy', '13947.npy', '13950.npy', '13960.npy', '13974.npy', '14017.npy', '14033.npy', '14064.npy', '14205.npy', '14225.npy', '14241.npy', '14334.npy', '14357.npy', '14426.npy', '14489.npy', '14503.npy', '14504.npy', '14511.npy', '14517.npy', '14520.npy', '14531.npy', '14563.npy', '14613.npy', '14682.npy', '14695.npy', '14744.npy', '14759.npy', '14776.npy', '14801.npy', '14806.npy', '14815.npy', '14863.npy', '14880.npy', '14886.npy', '14889.npy', '14911.npy', '14928.npy', '14970.npy', '14979.npy', '14983.npy', '15046.npy', '15047.npy', '15080.npy', '15143.npy', '15172.npy', '15200.npy', '15228.npy', '15283.npy', '15302.npy', '15333.npy', '15383.npy', '15387.npy', '15458.npy', '15476.npy', '15479.npy', '15551.npy', '15595.npy', '15598.npy', '15620.npy', '15636.npy', '15665.npy', '15672.npy', '15682.npy', '15689.npy', '15721.npy', '15734.npy', '15745.npy', '15751.npy', '15754.npy', '15825.npy', '15857.npy', '15873.npy', '15892.npy', '15985.npy', '16053.npy', '16092.npy', '16116.npy', '16131.npy', '16152.npy', '16172.npy', '16227.npy', '16275.npy', '16349.npy', '16383.npy', '16472.npy', '16498.npy', '16518.npy', '16535.npy', '16544.npy', '16568.npy', '16675.npy', '16684.npy', '16717.npy', '16722.npy', '16743.npy', '16751.npy', '16777.npy', '16810.npy', '16884.npy', '16905.npy', '16906.npy', '16910.npy', '16912.npy', '16916.npy', '16918.npy', '16930.npy', '16935.npy', '16968.npy', '16987.npy', '16988.npy', '17061.npy', '17070.npy', '17158.npy', '17167.npy', '17171.npy', '17241.npy', '17256.npy', '17266.npy', '17303.npy', '17325.npy', '17327.npy', '17335.npy', '17341.npy', '17376.npy', '17379.npy', '17382.npy', '17455.npy', '17460.npy', '17462.npy', '17511.npy', '17514.npy', '17522.npy', '17523.npy', '17534.npy', '17536.npy', '17546.npy', '17549.npy', '17599.npy', '17605.npy', '17633.npy', '17655.npy', '17679.npy', '17695.npy', '17698.npy', '17706.npy', '17729.npy', '17757.npy', '17782.npy', '17805.npy', '17872.npy', '17902.npy', '17914.npy', '17922.npy', '17982.npy', '18013.npy', '18048.npy', '18057.npy', '18175.npy', '18176.npy', '18186.npy', '18194.npy', '18254.npy', '18282.npy', '18321.npy', '18381.npy', '18388.npy', '18414.npy', '18438.npy', '18491.npy', '18495.npy', '18526.npy', '18550.npy', '18561.npy', '18569.npy', '18638.npy', '18651.npy', '18656.npy', '18663.npy', '18718.npy', '18732.npy', '18733.npy', '18797.npy', '18816.npy', '18817.npy', '18843.npy', '18844.npy', '18845.npy', '18882.npy', '18920.npy', '18980.npy', '19048.npy', '19080.npy', '19101.npy', '19104.npy', '19105.npy', '19109.npy', '19110.npy', '19112.npy', '19131.npy', '19169.npy', '19236.npy', '19293.npy', '19343.npy', '19365.npy', '19374.npy', '19381.npy', '19419.npy', '19431.npy', '19442.npy', '19460.npy', '19478.npy', '19505.npy', '19542.npy', '19617.npy', '19661.npy', '19703.npy', '19712.npy', '19741.npy', '19788.npy', '19821.npy', '19849.npy', '19898.npy', '19908.npy', '19910.npy', '19996.npy', '20000.npy', '20011.npy', '20019.npy', '20023.npy', '20106.npy', '20128.npy', '20131.npy', '20159.npy', '20161.npy', '20174.npy', '20187.npy', '20212.npy', '20215.npy', '20217.npy', '20221.npy', '20269.npy', '20375.npy', '20426.npy', '20428.npy', '20448.npy', '20462.npy', '20491.npy', '20523.npy', '20531.npy', '20553.npy', '20556.npy', '20584.npy', '20589.npy', '20647.npy', '20686.npy', '20700.npy', '20749.npy', '20788.npy', '20797.npy', '20810.npy', '20819.npy', '20836.npy', '20840.npy', '20882.npy', '20897.npy', '20961.npy', '20968.npy', '21046.npy', '21088.npy', '21106.npy', '21113.npy', '21128.npy', '21142.npy', '21149.npy', '21182.npy', '21183.npy', '21205.npy', '21320.npy', '21328.npy', '21348.npy', '21411.npy', '21476.npy', '21484.npy', '21530.npy', '21534.npy', '21549.npy', '21564.npy', '21576.npy', '21591.npy', '21596.npy', '21646.npy', '21718.npy', '21777.npy', '21794.npy', '21821.npy', '21833.npy', '21875.npy', '21903.npy', '21907.npy', '21921.npy', '21947.npy', '22002.npy', '22014.npy', '22026.npy', '22037.npy', '22050.npy', '22102.npy', '22120.npy', '22125.npy', '22133.npy', '22176.npy', '22182.npy', '22196.npy', '22206.npy', '22237.npy', '22254.npy', '22277.npy', '22321.npy', '22384.npy', '22406.npy', '22417.npy', '22486.npy', '22505.npy', '22511.npy', '22517.npy', '22532.npy', '22546.npy', '22551.npy', '22553.npy', '22588.npy', '22591.npy', '22700.npy', '22706.npy', '22742.npy', '22743.npy', '22756.npy', '22764.npy', '22808.npy', '22810.npy', '22835.npy', '22841.npy', '22917.npy', '22957.npy', '22969.npy', '22994.npy', '22997.npy', '23001.npy', '23031.npy', '23036.npy', '23067.npy', '23071.npy', '23098.npy', '23113.npy', '23125.npy', '23145.npy', '23158.npy', '23201.npy', '23207.npy', '23208.npy', '23215.npy', '23249.npy', '23254.npy', '23299.npy', '23341.npy', '23373.npy', '23429.npy', '23512.npy', '23525.npy', '23538.npy', '23603.npy', '23631.npy', '23655.npy', '23761.npy', '23767.npy', '23775.npy', '23792.npy', '23831.npy', '23839.npy', '23907.npy', '23985.npy', '24003.npy', '24041.npy', '24082.npy', '24113.npy', '24133.npy', '24182.npy', '24202.npy', '24216.npy', '24255.npy', '24274.npy', '24280.npy', '24316.npy', '24319.npy', '24374.npy', '24389.npy', '24410.npy', '24413.npy', '24442.npy', '24478.npy', '24507.npy', '24572.npy', '24574.npy', '24585.npy', '24614.npy', '24642.npy', '24646.npy', '24651.npy', '24706.npy', '24732.npy', '24781.npy', '24799.npy', '24841.npy', '24905.npy', '24941.npy', '24984.npy', '25022.npy', '25042.npy', '25066.npy', '25122.npy', '25151.npy', '25181.npy', '25184.npy', '25221.npy', '25240.npy', '25259.npy', '25271.npy', '25273.npy', '25274.npy', '25321.npy', '25337.npy', '25361.npy', '25387.npy', '25425.npy', '25430.npy', '25452.npy', '25453.npy', '25467.npy', '25469.npy', '25472.npy', '25519.npy', '25554.npy', '25563.npy', '25583.npy', '25596.npy', '25672.npy', '25689.npy', '25752.npy', '25830.npy', '25833.npy', '25924.npy', '25931.npy', '25941.npy', '25952.npy', '25974.npy', '25995.npy', '26024.npy', '26078.npy', '26096.npy', '26124.npy', '26132.npy', '26153.npy', '26195.npy', '26222.npy', '26273.npy', '26328.npy', '26343.npy', '26351.npy', '26358.npy', '26403.npy', '26414.npy', '26507.npy', '26584.npy', '26612.npy', '26700.npy', '26717.npy', '26746.npy', '26783.npy', '26796.npy', '26810.npy', '26880.npy', '26893.npy', '26896.npy', '26986.npy', '27021.npy', '27042.npy', '27118.npy', '27135.npy', '27186.npy', '27225.npy', '27263.npy', '27292.npy', '27315.npy', '27319.npy', '27382.npy', '27388.npy', '27441.npy', '27445.npy', '27451.npy', '27496.npy', '27544.npy', '27551.npy', '27552.npy', '27613.npy', '27618.npy', '27626.npy', '27657.npy', '27748.npy', '27755.npy', '27809.npy', '27826.npy', '27851.npy', '27883.npy', '27938.npy', '28019.npy', '28040.npy', '28045.npy', '28060.npy', '28097.npy', '28098.npy', '28103.npy', '28186.npy', '28341.npy', '28349.npy', '28364.npy', '28377.npy', '28380.npy', '28389.npy', '28468.npy', '28470.npy', '28504.npy', '28523.npy', '28533.npy', '28536.npy', '28559.npy', '28584.npy', '28616.npy', '28655.npy', '28667.npy', '28705.npy', '28724.npy', '28757.npy', '28773.npy', '28792.npy', '28842.npy', '28877.npy', '29041.npy', '29055.npy', '29079.npy', '29095.npy', '29132.npy', '29163.npy', '29179.npy', '29196.npy', '29229.npy', '29237.npy', '29247.npy', '29254.npy', '29271.npy', '29284.npy', '29304.npy', '29336.npy', '29359.npy', '29400.npy', '29418.npy', '29448.npy', '29460.npy', '29516.npy', '29527.npy', '29529.npy', '29562.npy', '29584.npy', '29593.npy', '29596.npy', '29606.npy', '29632.npy', '29651.npy', '29654.npy', '29723.npy', '29770.npy', '29773.npy', '29807.npy', '29809.npy', '29843.npy', '29865.npy', '29879.npy', '29903.npy', '29947.npy', '29953.npy', '29959.npy', '29981.npy', '29988.npy', '29996.npy', '30020.npy', '30026.npy', '30027.npy', '30083.npy', '30177.npy', '30191.npy', '30213.npy', '30228.npy', '30278.npy', '30299.npy', '30314.npy', '30338.npy', '30348.npy', '30374.npy', '30431.npy', '30443.npy', '30450.npy', '30481.npy', '30494.npy', '30535.npy', '30573.npy', '30587.npy', '30649.npy', '30689.npy', '30714.npy', '30762.npy', '30780.npy', '30781.npy', '30851.npy', '30884.npy', '30904.npy', '30910.npy', '30962.npy', '30982.npy', '30999.npy', '31031.npy', '31032.npy', '31046.npy', '31070.npy', '31113.npy', '31117.npy', '31122.npy', '31157.npy', '31161.npy', '31175.npy', '31211.npy', '31226.npy', '31228.npy', '31232.npy', '31238.npy', '31287.npy', '31306.npy', '31328.npy', '31347.npy', '31350.npy', '31372.npy', '31374.npy', '31393.npy', '31416.npy', '31438.npy', '31443.npy', '31451.npy', '31502.npy', '31536.npy', '31559.npy', '31581.npy', '31582.npy', '31641.npy', '31666.npy', '31704.npy', '31747.npy', '31786.npy', '31807.npy', '31839.npy', '31843.npy', '31902.npy', '31918.npy', '31945.npy', '31955.npy', '31956.npy', '32051.npy', '32122.npy', '32123.npy', '32127.npy', '32171.npy', '32207.npy', '32223.npy', '32310.npy', '32315.npy', '32326.npy', '32335.npy', '32351.npy', '32462.npy', '32541.npy', '32578.npy', '32612.npy', '32614.npy', '32635.npy', '32717.npy', '32719.npy', '32736.npy', '32747.npy', '32750.npy', '32773.npy', '32819.npy', '32872.npy', '32939.npy', '32944.npy', '32963.npy', '32995.npy', '33090.npy', '33096.npy', '33104.npy', '33111.npy', '33129.npy', '33202.npy', '33234.npy', '33251.npy', '33253.npy', '33283.npy', '33300.npy', '33369.npy', '33371.npy', '33411.npy', '33422.npy', '33446.npy', '33464.npy', '33530.npy', '33536.npy', '33545.npy', '33555.npy', '33557.npy', '33685.npy', '33687.npy', '33702.npy', '33714.npy', '33726.npy', '33732.npy', '33736.npy', '33760.npy', '33822.npy', '33864.npy', '33900.npy', '33918.npy', '33983.npy', '34031.npy', '34056.npy', '34091.npy', '34121.npy', '34139.npy', '34148.npy', '34195.npy', '34196.npy', '34220.npy', '34232.npy', '34239.npy', '34241.npy', '34294.npy', '34318.npy', '34356.npy', '34362.npy', '34399.npy', '34430.npy', '34431.npy', '34490.npy', '34504.npy', '34540.npy', '34552.npy', '34558.npy', '34590.npy', '34633.npy', '34663.npy', '34678.npy', '34724.npy', '34737.npy', '34793.npy', '34836.npy', '34859.npy', '34865.npy', '34875.npy', '34927.npy', '35003.npy', '35032.npy', '35072.npy', '35102.npy', '35142.npy', '35175.npy', '35201.npy', '35242.npy', '35244.npy', '35262.npy', '35273.npy', '35290.npy', '35292.npy', '35293.npy', '35305.npy', '35338.npy', '35370.npy', '35374.npy', '35441.npy', '35443.npy', '35478.npy', '35481.npy', '35492.npy', '35497.npy', '35508.npy', '35514.npy', '35551.npy', '35562.npy', '35630.npy', '35717.npy', '35764.npy', '35790.npy', '35793.npy', '35826.npy', '35843.npy', '35853.npy', '35866.npy', '35930.npy', '35943.npy', '35985.npy', '36070.npy', '36071.npy', '36165.npy', '36169.npy', '36178.npy', '36179.npy', '36246.npy', '36267.npy', '36283.npy', '36298.npy', '36337.npy', '36341.npy', '36357.npy', '36427.npy', '36452.npy', '36480.npy', '36505.npy', '36535.npy', '36536.npy', '36562.npy', '36584.npy', '36600.npy', '36603.npy', '36618.npy', '36640.npy', '36669.npy', '36673.npy', '36677.npy', '36680.npy', '36683.npy', '36702.npy', '36719.npy', '36743.npy', '36803.npy', '36806.npy', '36807.npy', '36851.npy', '36876.npy', '36935.npy', '36991.npy', '36994.npy', '36996.npy', '36997.npy', '37001.npy', '37033.npy', '37128.npy', '37140.npy', '37151.npy', '37168.npy', '37169.npy', '37194.npy', '37252.npy', '37263.npy', '37268.npy', '37271.npy', '37285.npy', '37286.npy', '37323.npy', '37357.npy', '37366.npy', '37404.npy', '37426.npy', '37436.npy', '37484.npy', '37498.npy', '37503.npy', '37513.npy', '37547.npy', '37582.npy', '37583.npy', '37587.npy', '37591.npy', '37593.npy', '37601.npy', '37632.npy', '37646.npy', '37653.npy', '37667.npy', '37668.npy', '37684.npy', '37691.npy', '37711.npy', '37800.npy', '37808.npy', '37828.npy', '37833.npy', '37836.npy', '37865.npy', '37887.npy', '37891.npy', '37900.npy', '37920.npy', '37959.npy', '37963.npy', '37973.npy', '38038.npy', '38052.npy', '38057.npy', '38081.npy', '38086.npy', '38091.npy', '38110.npy', '38113.npy', '38119.npy', '38137.npy', '38140.npy', '38181.npy', '38194.npy', '38239.npy', '38252.npy', '38257.npy', '38262.npy', '38306.npy', '38310.npy', '38316.npy', '38318.npy', '38331.npy', '38350.npy', '38373.npy', '38396.npy', '38431.npy', '38459.npy', '38486.npy', '38554.npy', '38575.npy', '38577.npy', '38636.npy', '38643.npy', '38671.npy', '38692.npy', '38770.npy', '38786.npy', '38841.npy', '38872.npy', '38893.npy', '38911.npy', '38919.npy', '38984.npy', '38992.npy', '38994.npy', '39022.npy', '39061.npy', '39086.npy', '39106.npy', '39114.npy', '39176.npy', '39178.npy', '39188.npy', '39223.npy', '39235.npy', '39271.npy', '39345.npy', '39416.npy', '39423.npy', '39437.npy', '39453.npy', '39462.npy', '39477.npy', '39495.npy', '39520.npy', '39530.npy', '39616.npy', '39669.npy', '39700.npy', '39729.npy', '39732.npy', '39770.npy', '39796.npy', '39812.npy', '39820.npy', '39826.npy', '39829.npy', '39842.npy', '39880.npy', '39909.npy', '39932.npy', '39945.npy', '39962.npy', '39965.npy', '39988.npy', '40056.npy', '40071.npy', '40080.npy', '40148.npy', '40174.npy', '40198.npy', '40216.npy', '40227.npy', '40254.npy', '40273.npy', '40298.npy', '40329.npy', '40353.npy', '40355.npy', '40378.npy', '40388.npy', '40402.npy', '40417.npy', '40467.npy', '40495.npy', '40519.npy', '40532.npy', '40578.npy', '40583.npy', '40603.npy', '40606.npy', '40620.npy', '40628.npy', '40632.npy', '40662.npy', '40666.npy', '40668.npy', '40719.npy', '40763.npy', '40794.npy', '40811.npy', '40813.npy', '40819.npy', '40831.npy', '40876.npy', '40893.npy', '40923.npy', '40930.npy', '41005.npy', '41010.npy', '41045.npy', '41079.npy', '41112.npy', '41201.npy', '41234.npy', '41255.npy', '41272.npy', '41294.npy', '41307.npy', '41309.npy', '41353.npy', '41408.npy', '41423.npy', '41435.npy', '41470.npy', '41512.npy', '41553.npy', '41637.npy', '41655.npy', '41691.npy', '41741.npy', '41748.npy', '41816.npy', '41826.npy', '41827.npy', '41835.npy', '41846.npy', '41893.npy', '41967.npy', '41977.npy', '41994.npy', '42068.npy', '42112.npy', '42128.npy', '42139.npy', '42142.npy', '42165.npy', '42229.npy', '42237.npy', '42248.npy', '42267.npy', '42270.npy', '42329.npy', '42336.npy', '42345.npy', '42409.npy', '42434.npy', '42447.npy', '42460.npy', '42489.npy', '42492.npy', '42518.npy', '42557.npy', '42559.npy', '42564.npy', '42585.npy', '42589.npy', '42620.npy', '42653.npy', '42655.npy', '42657.npy', '42694.npy', '42715.npy', '42727.npy', '42743.npy', '42805.npy', '42824.npy', '42834.npy', '42835.npy', '42859.npy', '42862.npy', '42874.npy', '42911.npy', '42913.npy', '42915.npy', '42977.npy', '43012.npy', '43105.npy', '43146.npy', '43176.npy', '43195.npy', '43233.npy', '43243.npy', '43259.npy', '43266.npy', '43316.npy', '43382.npy', '43393.npy', '43438.npy', '43459.npy', '43471.npy', '43519.npy', '43548.npy', '43642.npy', '43658.npy', '43717.npy', '43731.npy', '43749.npy', '43759.npy', '43772.npy', '43787.npy', '43799.npy', '43834.npy', '43856.npy', '43898.npy', '43967.npy', '43974.npy', '43977.npy', '43991.npy', '44001.npy', '44016.npy', '44026.npy', '44044.npy', '44063.npy', '44087.npy', '44124.npy', '44156.npy', '44177.npy', '44205.npy', '44218.npy', '44241.npy', '44261.npy', '44267.npy', '44302.npy', '44343.npy', '44350.npy', '44370.npy', '44433.npy', '44460.npy', '44474.npy', '44492.npy', '44523.npy', '44550.npy', '44553.npy', '44558.npy', '44568.npy', '44578.npy', '44581.npy', '44642.npy', '44653.npy', '44687.npy', '44692.npy', '44719.npy', '44732.npy', '44743.npy', '44755.npy', '44790.npy', '44883.npy', '44891.npy', '44911.npy', '44932.npy', '45005.npy', '45059.npy', '45099.npy', '45132.npy', '45138.npy', '45160.npy', '45167.npy', '45170.npy', '45243.npy', '45246.npy', '45279.npy', '45286.npy', '45287.npy', '45292.npy', '45293.npy', '45319.npy', '45336.npy', '45351.npy', '45364.npy', '45366.npy', '45374.npy', '45386.npy', '45412.npy', '45416.npy', '45446.npy', '45484.npy', '45485.npy', '45486.npy', '45494.npy', '45507.npy', '45524.npy', '45552.npy', '45557.npy', '45567.npy', '45568.npy', '45569.npy', '45592.npy', '45736.npy', '45743.npy', '45801.npy', '45829.npy', '45830.npy', '45841.npy', '45888.npy', '45894.npy', '45923.npy', '45953.npy', '45955.npy', '46025.npy', '46043.npy', '46045.npy', '46051.npy', '46073.npy', '46080.npy', '46099.npy', '46146.npy', '46228.npy', '46306.npy', '46307.npy', '46386.npy', '46387.npy', '46407.npy', '46432.npy', '46433.npy', '46434.npy', '46511.npy', '46603.npy', '46608.npy', '46614.npy', '46634.npy', '46669.npy', '46738.npy', '46739.npy', '46752.npy', '46787.npy', '46790.npy', '46808.npy', '46860.npy', '46883.npy', '46905.npy', '46936.npy', '46940.npy', '46974.npy', '47026.npy', '47032.npy', '47046.npy', '47058.npy', '47077.npy', '47185.npy', '47187.npy', '47258.npy', '47283.npy', '47289.npy', '47293.npy', '47335.npy', '47365.npy', '47503.npy', '47537.npy', '47542.npy', '47554.npy', '47588.npy', '47589.npy', '47627.npy', '47649.npy', '47772.npy', '47791.npy', '47814.npy', '47830.npy', '47862.npy', '47864.npy', '47867.npy', '47878.npy', '47917.npy', '47932.npy', '47965.npy', '47973.npy', '47986.npy', '47995.npy', '48032.npy', '48041.npy', '48048.npy', '48055.npy', '48125.npy', '48171.npy', '48195.npy', '48216.npy', '48218.npy', '48237.npy', '48250.npy', '48285.npy', '48345.npy', '48354.npy', '48394.npy', '48437.npy', '48578.npy', '48645.npy', '48660.npy', '48677.npy', '48684.npy', '48742.npy', '48748.npy', '48761.npy', '48764.npy', '48775.npy', '48805.npy', '48809.npy', '48918.npy', '48987.npy', '49016.npy', '49037.npy', '49050.npy', '49099.npy', '49108.npy', '49139.npy', '49164.npy', '49177.npy', '49231.npy', '49241.npy', '49259.npy', '49276.npy', '49285.npy', '49298.npy', '49324.npy', '49358.npy', '49390.npy', '49439.npy', '49452.npy', '49467.npy', '49470.npy', '49530.npy', '49541.npy', '49553.npy', '49605.npy', '49672.npy', '49695.npy', '49794.npy', '49804.npy', '49835.npy', '49856.npy', '49891.npy', '49896.npy', '49897.npy', '49920.npy', '49956.npy', '49958.npy', '50008.npy', '50009.npy', '50025.npy', '50045.npy', '50081.npy', '50136.npy', '50169.npy', '50179.npy', '50185.npy', '50186.npy', '50216.npy', '50293.npy', '50343.npy', '50357.npy', '50377.npy', '50378.npy', '50408.npy', '50409.npy', '50417.npy', '50428.npy', '50488.npy', '50495.npy', '50517.npy', '50518.npy', '50534.npy', '50551.npy', '50554.npy', '50583.npy', '50647.npy', '50717.npy', '50718.npy', '50728.npy', '50779.npy', '50786.npy', '50880.npy', '50899.npy', '50901.npy', '50913.npy', '50920.npy', '50921.npy', '50925.npy', '50980.npy', '50981.npy', '51000.npy', '51017.npy', '51031.npy', '51038.npy', '51050.npy', '51150.npy', '51161.npy', '51191.npy', '51290.npy', '51299.npy', '51334.npy', '51340.npy', '51345.npy', '51346.npy', '51379.npy', '51383.npy', '51398.npy', '51418.npy', '51448.npy', '51465.npy', '51474.npy', '51559.npy', '51570.npy', '51576.npy', '51691.npy', '51712.npy', '51764.npy', '51787.npy', '51812.npy', '51834.npy', '51883.npy', '51896.npy', '51898.npy', '51939.npy', '51948.npy', '51970.npy', '51990.npy', '52082.npy', '52097.npy', '52130.npy', '52145.npy', '52151.npy', '52171.npy', '52191.npy', '52216.npy', '52238.npy', '52260.npy', '52266.npy', '52366.npy', '52412.npy', '52451.npy', '52497.npy', '52524.npy', '52567.npy', '52683.npy', '52776.npy', '52780.npy', '52797.npy', '52825.npy', '52853.npy', '52868.npy', '52878.npy', '52986.npy', '53038.npy', '53043.npy', '53049.npy', '53057.npy', '53132.npy', '53136.npy', '53223.npy', '53225.npy', '53273.npy', '53276.npy', '53296.npy', '53358.npy', '53418.npy', '53444.npy', '53446.npy', '53480.npy', '53482.npy', '53492.npy', '53494.npy', '53504.npy', '53566.npy', '53597.npy', '53613.npy', '53614.npy', '53679.npy', '53683.npy', '53757.npy', '53792.npy', '53816.npy', '53841.npy', '53842.npy', '53852.npy', '53860.npy', '53922.npy', '53924.npy', '53992.npy', '53993.npy', '54010.npy', '54019.npy', '54025.npy', '54076.npy', '54084.npy', '54088.npy', '54105.npy', '54135.npy', '54175.npy', '54204.npy', '54225.npy', '54228.npy', '54229.npy', '54259.npy', '54303.npy', '54305.npy', '54346.npy', '54347.npy', '54372.npy', '54383.npy', '54440.npy', '54465.npy', '54475.npy', '54492.npy', '54497.npy', '54550.npy', '54588.npy', '54617.npy', '54730.npy', '54771.npy', '54804.npy', '54844.npy', '54853.npy', '54960.npy', '54961.npy', '54989.npy', '54994.npy', '55053.npy', '55061.npy', '55112.npy', '55198.npy', '55200.npy', '55205.npy', '55223.npy', '55252.npy', '55259.npy', '55289.npy', '55296.npy', '55329.npy', '55331.npy', '55333.npy', '55341.npy', '55345.npy', '55365.npy', '55382.npy', '55411.npy', '55469.npy', '55491.npy', '55517.npy', '55529.npy', '55530.npy', '55559.npy', '55562.npy', '55621.npy', '55663.npy', '55697.npy', '55706.npy', '55727.npy', '55751.npy', '55757.npy', '55795.npy', '55812.npy', '55815.npy', '55835.npy', '55888.npy', '55891.npy', '55913.npy', '55918.npy', '56003.npy', '56024.npy', '56054.npy', '56095.npy', '56116.npy', '56121.npy', '56135.npy', '56141.npy', '56158.npy', '56180.npy', '56186.npy', '56190.npy', '56201.npy', '56208.npy', '56262.npy', '56266.npy', '56316.npy', '56322.npy', '56349.npy', '56356.npy', '56403.npy', '56481.npy', '56494.npy', '56557.npy', '56574.npy', '56619.npy', '56634.npy', '56682.npy', '56715.npy', '56740.npy', '56753.npy', '56794.npy', '56830.npy', '56836.npy', '56868.npy', '56953.npy', '56961.npy', '57002.npy', '57082.npy', '57113.npy', '57142.npy', '57182.npy', '57256.npy', '57298.npy', '57328.npy', '57393.npy', '57404.npy', '57406.npy', '57417.npy', '57418.npy', '57449.npy', '57453.npy', '57477.npy', '57484.npy', '57508.npy', '57519.npy', '57522.npy', '57559.npy', '57562.npy', '57577.npy', '57604.npy', '57661.npy', '57671.npy', '57677.npy', '57683.npy', '57723.npy', '57726.npy', '57757.npy', '57779.npy', '57847.npy', '57861.npy', '57873.npy', '57950.npy', '57964.npy', '58002.npy', '58030.npy', '58049.npy', '58052.npy', '58146.npy', '58147.npy', '58148.npy', '58193.npy', '58214.npy', '58236.npy', '58237.npy', '58267.npy', '58270.npy', '58289.npy', '58302.npy', '58342.npy', '58445.npy', '58459.npy', '58463.npy', '58484.npy', '58517.npy', '58532.npy', '58540.npy', '58580.npy', '58588.npy', '58620.npy', '58656.npy', '58767.npy', '58774.npy', '58776.npy', '58790.npy', '58812.npy', '58834.npy', '58899.npy', '58911.npy', '58939.npy', '58986.npy', '58996.npy', '58999.npy', '59009.npy', '59027.npy', '59090.npy', '59122.npy', '59139.npy', '59167.npy', '59201.npy', '59230.npy', '59232.npy', '59304.npy', '59323.npy', '59333.npy', '59337.npy', '59365.npy', '59395.npy', '59405.npy', '59445.npy', '59456.npy', '59458.npy', '59472.npy', '59499.npy', '59525.npy', '59528.npy', '59533.npy', '59541.npy', '59543.npy', '59637.npy', '59640.npy', '59681.npy', '59695.npy', '59706.npy', '59718.npy', '59776.npy', '59812.npy', '59832.npy', '59841.npy', '59904.npy', '59922.npy', '59926.npy', '59981.npy', '59991.npy', '59995.npy', '60002.npy', '60061.npy', '60067.npy', '60082.npy', '60160.npy', '60204.npy', '60214.npy', '60284.npy', '60302.npy', '60379.npy', '60390.npy', '60395.npy', '60459.npy', '60489.npy', '60512.npy', '60536.npy', '60542.npy', '60580.npy', '60613.npy', '60638.npy', '60661.npy', '60697.npy', '60727.npy', '60780.npy', '60783.npy', '60936.npy', '61044.npy', '61048.npy', '61076.npy', '61081.npy', '61097.npy', '61128.npy', '61141.npy', '61151.npy', '61179.npy', '61204.npy', '61209.npy', '61236.npy', '61299.npy', '61303.npy', '61332.npy', '61340.npy', '61350.npy', '61351.npy', '61389.npy', '61400.npy', '61406.npy', '61412.npy', '61462.npy', '61493.npy', '61518.npy', '61531.npy', '61545.npy', '61563.npy', '61669.npy', '61727.npy', '61746.npy', '61764.npy', '61792.npy', '61846.npy', '61847.npy', '61867.npy', '61894.npy', '61983.npy', '62043.npy', '62075.npy', '62078.npy', '62112.npy', '62216.npy', '62240.npy', '62266.npy', '62287.npy', '62307.npy', '62328.npy', '62330.npy', '62340.npy', '62367.npy', '62378.npy', '62417.npy', '62485.npy', '62488.npy', '62561.npy', '62593.npy', '62614.npy', '62672.npy', '62704.npy', '62714.npy', '62723.npy', '62744.npy', '62762.npy', '62782.npy', '62795.npy', '62843.npy', '62854.npy', '62863.npy', '62866.npy', '62883.npy', '62894.npy', '62925.npy', '62957.npy', '62966.npy', '62977.npy', '63003.npy', '63024.npy', '63028.npy', '63041.npy', '63097.npy', '63108.npy', '63154.npy', '63232.npy', '63233.npy', '63297.npy', '63362.npy', '63400.npy', '63423.npy', '63430.npy', '63476.npy', '63492.npy', '63525.npy', '63527.npy', '63577.npy', '63595.npy', '63665.npy', '63680.npy', '63686.npy', '63691.npy', '63719.npy', '63721.npy', '63745.npy', '63773.npy', '63782.npy', '63855.npy', '63858.npy', '63871.npy', '63903.npy', '63911.npy', '63950.npy', '63966.npy', '63982.npy', '63985.npy', '64027.npy', '64058.npy', '64164.npy', '64174.npy', '64191.npy', '64258.npy', '64285.npy', '64305.npy', '64308.npy', '64337.npy', '64372.npy', '64381.npy', '64397.npy', '64480.npy', '64525.npy', '64526.npy', '64562.npy', '64575.npy', '64588.npy', '64598.npy', '64606.npy', '64642.npy', '64668.npy', '64773.npy', '64857.npy', '64875.npy', '64915.npy', '64924.npy', '64948.npy', '65017.npy', '65102.npy', '65157.npy', '65183.npy', '65195.npy', '65247.npy', '65263.npy', '65264.npy', '65341.npy', '65376.npy', '65415.npy', '65433.npy', '65478.npy', '65513.npy', '65557.npy', '65564.npy', '65568.npy', '65574.npy', '65641.npy', '65689.npy', '65713.npy', '65759.npy', '65785.npy', '65801.npy', '65841.npy', '65849.npy', '65870.npy', '65891.npy', '65943.npy', '66110.npy', '66122.npy', '66175.npy', '66193.npy', '66194.npy', '66223.npy', '66234.npy', '66352.npy', '66361.npy', '66376.npy', '66389.npy', '66397.npy', '66415.npy', '66418.npy', '66426.npy', '66464.npy', '66480.npy', '66507.npy', '66530.npy', '66610.npy', '66626.npy', '66664.npy', '66665.npy', '66686.npy', '66735.npy', '66766.npy', '66767.npy', '66784.npy', '66786.npy', '66793.npy', '66834.npy', '66915.npy', '66948.npy', '67006.npy', '67015.npy', '67196.npy', '67204.npy', '67277.npy', '67293.npy', '67301.npy', '67323.npy', '67372.npy', '67373.npy', '67388.npy', '67411.npy', '67425.npy', '67450.npy', '67461.npy', '67472.npy', '67480.npy', '67504.npy', '67506.npy', '67510.npy', '67534.npy', '67538.npy', '67587.npy', '67602.npy', '67653.npy', '67702.npy', '67704.npy', '67717.npy', '67735.npy', '67741.npy', '67812.npy', '67841.npy', '67864.npy', '67895.npy', '67905.npy', '67926.npy', '67941.npy', '67943.npy', '67954.npy', '67990.npy', '67997.npy', '68012.npy', '68032.npy', '68044.npy', '68053.npy', '68065.npy', '68081.npy', '68119.npy', '68154.npy', '68166.npy', '68168.npy', '68177.npy', '68224.npy', '68237.npy', '68300.npy', '68344.npy', '68399.npy', '68498.npy', '68524.npy', '68550.npy', '68567.npy', '68592.npy', '68644.npy', '68670.npy', '68681.npy', '68710.npy', '68748.npy', '68772.npy', '68802.npy', '68839.npy', '68871.npy', '68910.npy', '68913.npy', '68917.npy', '68979.npy', '68998.npy', '69100.npy', '69141.npy', '69162.npy', '69166.npy', '69171.npy', '69201.npy', '69235.npy', '69270.npy', '69312.npy', '69352.npy', '69357.npy', '69358.npy', '69385.npy', '69393.npy', '69401.npy', '69421.npy', '69429.npy', '69432.npy', '69450.npy', '69465.npy', '69484.npy', '69526.npy', '69570.npy', '69612.npy', '69659.npy', '69663.npy', '69694.npy', '69735.npy', '69766.npy', '69768.npy', '69805.npy', '69834.npy', '69854.npy', '69886.npy', '70047.npy', '70048.npy', '70051.npy', '70081.npy', '70101.npy', '70140.npy', '70155.npy', '70161.npy', '70212.npy', '70226.npy', '70286.npy', '70289.npy', '70318.npy', '70358.npy', '70364.npy', '70368.npy', '70381.npy', '70435.npy', '70439.npy', '70531.npy', '70573.npy', '70589.npy', '70606.npy', '70622.npy', '70643.npy', '70662.npy', '70674.npy', '70681.npy', '70687.npy', '70725.npy', '70734.npy', '70782.npy', '70791.npy', '70833.npy', '70845.npy', '70846.npy', '70918.npy', '70923.npy', '70940.npy', '70945.npy', '70956.npy', '70963.npy', '70974.npy', '70981.npy', '70989.npy', '71002.npy', '71059.npy', '71108.npy', '71116.npy', '71122.npy', '71129.npy', '71217.npy', '71230.npy', '71268.npy', '71303.npy', '71320.npy', '71337.npy', '71350.npy', '71354.npy', '71356.npy', '71379.npy', '71382.npy', '71407.npy', '71436.npy', '71460.npy', '71489.npy', '71581.npy', '71613.npy', '71615.npy', '71730.npy', '71798.npy', '71828.npy', '71889.npy', '71905.npy', '71936.npy', '71942.npy', '71949.npy', '71964.npy', '72003.npy', '72089.npy', '72114.npy', '72188.npy', '72199.npy', '72217.npy', '72234.npy', '72305.npy', '72307.npy', '72336.npy', '72342.npy', '72360.npy', '72375.npy', '72387.npy', '72480.npy', '72495.npy', '72515.npy', '72534.npy', '72558.npy', '72580.npy', '72644.npy', '72706.npy', '72751.npy', '72752.npy', '72757.npy', '72761.npy', '72819.npy', '72866.npy', '72887.npy', '72889.npy', '72893.npy', '72898.npy', '72921.npy', '72961.npy', '73001.npy', '73012.npy', '73029.npy', '73045.npy', '73053.npy', '73114.npy', '73120.npy', '73153.npy', '73166.npy', '73196.npy', '73218.npy', '73234.npy', '73243.npy', '73306.npy', '73340.npy', '73343.npy', '73348.npy', '73355.npy', '73367.npy', '73524.npy', '73527.npy', '73534.npy', '73568.npy', '73631.npy', '73665.npy', '73670.npy', '73674.npy', '73714.npy', '73715.npy', '73722.npy', '73731.npy', '73732.npy', '73739.npy', '73750.npy', '73818.npy', '73921.npy', '73932.npy', '74015.npy', '74034.npy', '74042.npy', '74084.npy', '74085.npy', '74126.npy', '74157.npy', '74159.npy', '74187.npy', '74238.npy', '74259.npy', '74274.npy', '74309.npy', '74325.npy', '74353.npy', '74376.npy', '74405.npy', '74442.npy', '74452.npy', '74466.npy', '74542.npy', '74554.npy', '74558.npy', '74597.npy', '74628.npy', '74668.npy', '74747.npy', '74763.npy', '74792.npy', '74795.npy', '74799.npy', '74828.npy', '74840.npy', '74841.npy', '74856.npy', '74867.npy', '74899.npy', '74908.npy', '74951.npy', '74997.npy', '75049.npy', '75067.npy', '75179.npy', '75185.npy', '75192.npy', '75268.npy', '75274.npy', '75288.npy', '75291.npy', '75307.npy', '75317.npy', '75355.npy', '75464.npy', '75475.npy', '75526.npy', '75529.npy', '75531.npy', '75552.npy', '75557.npy', '75583.npy', '75619.npy', '75622.npy', '75624.npy', '75681.npy', '75686.npy', '75692.npy', '75733.npy', '75755.npy', '75770.npy', '75787.npy', '75825.npy', '75869.npy', '75919.npy', '75950.npy', '75961.npy', '76007.npy', '76019.npy', '76074.npy', '76120.npy', '76154.npy', '76192.npy', '76195.npy', '76205.npy', '76208.npy', '76271.npy', '76302.npy', '76325.npy', '76328.npy', '76333.npy', '76336.npy', '76353.npy', '76386.npy', '76387.npy', '76438.npy', '76475.npy', '76494.npy', '76495.npy', '76497.npy', '76566.npy', '76593.npy', '76603.npy', '76604.npy', '76625.npy', '76626.npy', '76630.npy', '76638.npy', '76677.npy', '76706.npy', '76716.npy', '76719.npy', '76734.npy', '76738.npy', '76814.npy', '76845.npy', '76854.npy', '76917.npy', '76940.npy', '77019.npy', '77041.npy', '77078.npy', '77081.npy', '77089.npy', '77109.npy', '77142.npy', '77163.npy', '77213.npy', '77240.npy', '77263.npy', '77308.npy', '77352.npy', '77366.npy', '77388.npy', '77395.npy', '77410.npy', '77413.npy', '77435.npy', '77449.npy', '77467.npy', '77483.npy', '77544.npy', '77549.npy', '77563.npy', '77588.npy', '77597.npy', '77605.npy', '77642.npy', '77667.npy', '77711.npy', '77722.npy', '77745.npy', '77786.npy', '77794.npy', '77826.npy', '77854.npy', '77858.npy', '77867.npy', '77885.npy', '77903.npy', '77978.npy', '77991.npy', '78076.npy', '78093.npy', '78094.npy', '78104.npy', '78131.npy', '78144.npy', '78157.npy', '78159.npy', '78203.npy', '78248.npy', '78328.npy', '78348.npy', '78360.npy', '78400.npy', '78453.npy', '78454.npy', '78533.npy', '78536.npy', '78560.npy', '78600.npy', '78650.npy', '78689.npy', '78701.npy', '78780.npy', '78785.npy', '78818.npy', '78827.npy', '78868.npy', '78895.npy', '78904.npy', '78935.npy', '78938.npy', '79019.npy', '79049.npy', '79053.npy', '79105.npy', '79135.npy', '79138.npy', '79201.npy', '79205.npy', '79228.npy', '79369.npy', '79451.npy', '79458.npy', '79475.npy', '79478.npy', '79534.npy', '79558.npy', '79611.npy', '79621.npy', '79652.npy', '79659.npy', '79724.npy', '79748.npy', '79765.npy', '79777.npy', '79840.npy', '79857.npy', '79863.npy', '79927.npy', '79930.npy', '79962.npy', '79986.npy', '80010.npy', '80020.npy', '80024.npy', '80059.npy', '80121.npy', '80137.npy', '80177.npy', '80275.npy', '80291.npy', '80296.npy', '80298.npy', '80349.npy', '80357.npy', '80398.npy', '80425.npy', '80472.npy', '80475.npy', '80503.npy', '80526.npy', '80547.npy', '80644.npy', '80662.npy', '80679.npy', '80748.npy']
# The sample IDs of our 757 test sets overlap with those of House-GAN++ and HouseDiffusion.
ids_757 = [22384, 6580, 49804, 61669, 39235, 6478, 5589, 17335, 36298, 38239, 27755, 1559, 41079, 25387, 75049, 44063, 40603, 23249, 34590, 25941, 751, 69312, 56715, 48764, 51418, 8336, 18526, 71949, 20840, 8712, 8862, 58911, 32315, 67704, 70364, 77263, 70963, 43233, 54960, 53614, 55751, 71460, 63430, 64258, 56494, 13456, 42267, 15595, 68592, 43991, 3493, 54550, 71798, 74792, 27626, 65891, 56349, 37001, 44755, 39495, 5094, 59395, 58939, 44044, 74405, 9470, 47627, 45830, 75755, 25425, 40080, 37653, 14563, 34859, 76205, 35866, 26893, 39022, 25952, 68567, 66915, 34836, 42434, 26078, 42165, 74841, 53993, 29163, 41353, 63108, 44218, 74799, 5925, 36178, 34121, 70589, 50488, 66361, 32995, 13694, 8659, 614, 60379, 27186, 27938, 57404, 63577, 52497, 65841, 73196, 69429, 1466, 2678, 6686, 39729, 12211, 31175, 2626, 68998, 51299, 26195, 70833, 22277, 70956, 17655, 38350, 32122, 29095, 52145, 49541, 13542, 43438, 51346, 25924, 51379, 4795, 55663, 64598, 12600, 618, 71889, 10873, 58540, 21142, 13373, 43176, 65513, 23207, 39188, 27496, 36169, 73665, 76630, 27613, 13704, 38770, 48195, 80547, 69385, 33555, 38081, 53038, 4710, 56634, 42655, 4544, 14695, 48809, 8266, 16227, 6572, 73732, 29247, 17914, 50913, 31393, 78159, 17698, 6766, 80024, 43548, 53296, 4350, 69663, 70674, 76738, 49794, 38893, 65759, 34239, 2285, 34356, 59812, 55469, 42589, 54346, 8920, 1480, 67990, 23299, 8022, 56403, 45416, 54372, 59640, 49259, 21596, 78689, 80275, 6212, 14928, 44883, 65264, 9900, 55205, 73739, 50981, 9213, 73306, 50216, 24319, 49177, 7818, 70358, 3788, 63719, 3706, 77826, 13428, 48761, 51787, 53225, 80472, 48048, 29448, 76604, 24706, 74325, 45894, 49695, 68681, 22532, 70606, 23985, 40930, 55341, 48660, 39820, 73340, 28380, 71320, 78093, 31046, 22125, 5528, 72515, 15751, 23254, 64857, 57393, 79558, 80644, 71337, 13222, 25472, 68081, 7879, 20749, 36584, 3803, 27551, 71002, 52451, 41977, 30649, 52797, 50728, 31443, 51939, 55411, 45888, 42557, 75686, 75291, 37366, 55223, 69352, 26096, 53132, 47878, 22808, 46043, 12710, 60936, 8198, 51161, 51990, 71436, 76603, 17376, 20589, 57484, 47589, 78094, 764, 43787, 60661, 79478, 39106, 41045, 53504, 43266, 76917, 13947, 6514, 54175, 29527, 77109, 15873, 57726, 22237, 47862, 43856, 52366, 54259, 3556, 28773, 51038, 29584, 11707, 8262, 24732, 80296, 31807, 21907, 32207, 54994, 10378, 53057, 48250, 14801, 79611, 57453, 67425, 16131, 3684, 67926, 50518, 14744, 45484, 15283, 45364, 57683, 33371, 20215, 61400, 53446, 19381, 80475, 60727, 34793, 38431, 57604, 46752, 15080, 1745, 5504, 76120, 52171, 78104, 34678, 191, 23201, 55621, 56574, 66397, 23512, 71489, 2554, 30781, 78560, 70212, 46787, 47032, 39669, 45829, 68166, 79748, 77366, 63721, 16535, 12324, 9287, 63024, 4903, 30314, 69162, 42345, 21476, 40811, 50409, 7215, 19431, 75961, 70226, 46433, 12875, 62043, 31287, 52868, 74159, 39416, 72336, 72866, 21903, 14979, 59525, 75624, 77410, 31372, 65263, 16722, 71303, 28504, 41967, 42559, 13736, 78868, 27021, 41010, 47187, 28470, 71613, 78650, 40666, 48645, 2024, 60302, 8611, 55559, 71217, 13703, 53597, 29606, 42743, 72819, 57562, 49241, 1447, 54225, 75475, 67841, 37800, 80010, 77722, 74828, 53223, 4526, 50428, 51559, 38992, 76336, 9128, 25974, 23067, 77467, 48578, 59995, 19908, 1664, 13652, 77711, 25672, 80526, 76192, 11086, 79458, 4164, 48684, 21921, 50583, 33736, 22014, 76271, 57002, 21777, 70573, 5239, 66234, 79927, 74840, 62287, 76719, 47791, 23429, 40148, 76677, 12064, 9551, 50408, 71379, 67506, 28468, 24507, 33822, 2068, 37484, 73674, 44460, 74856, 34294, 25469, 42068, 23761, 39462, 67954, 3421, 55289, 71615, 64562, 22417, 17241, 22706, 38373, 74951, 28097, 34724, 25554, 37891, 42977, 22102, 2090, 16675, 54465, 4040, 12052, 19169, 71581, 44343, 34504, 44026, 13429, 56186, 34737, 4143, 11610, 50009, 37836, 53492, 19104, 4558, 63985, 47864, 11639, 51812, 50081, 50136, 18920, 55697, 51896, 14889, 54804, 19821, 50008, 79049, 7937, 65641, 78904, 11909, 68044, 22026, 50378, 69465, 79863, 16906, 10057, 57723, 39086, 56794, 11264, 17266, 8702, 76495, 874, 57477, 32717, 36337, 25022, 3182, 64480, 13481, 47830, 46386, 2132, 37711, 34540, 55727, 9861, 53922, 34241, 75268, 38486, 22254, 42142, 48055, 50495, 37808, 1593, 72217, 25361, 54383, 63950, 32171, 15985, 19788, 45801, 48032, 79857, 32051, 41691, 72305, 42112, 6484, 61389, 33685, 14511, 74628, 76494, 869, 59499, 36997, 6975, 50293, 38636, 17546, 12515, 49856, 49452, 36480, 1104, 31582, 54010, 33129, 25596, 28616, 30431, 56054, 47995, 53566, 43243, 7796, 76626, 61299, 41234, 14241, 21320, 35032, 32719, 56121, 74867, 27544, 54229, 1663, 80503, 47649, 75733, 19849, 6691, 1526, 10607, 77903, 75619, 10559, 72360, 18414, 57861, 53683, 55517, 48742, 52097, 32963, 39965, 78827, 12415, 2259, 47554, 52191, 13679, 7969, 20131, 17158, 46603, 37583, 953, 42329, 31374, 38262, 7750, 78533, 33369, 23603, 24799, 58532, 55112, 21794, 51570, 28377, 70662, 1772, 11335, 18438, 36267, 55061, 3880, 36246, 78144, 50899, 74997, 11171, 69694, 10174, 45955, 47588, 31306, 78536, 72898, 16930, 33446, 1666, 69612, 25452, 18663, 2401, 29903, 17382, 67510, 51345, 2688, 13377, 33536, 1022, 36806, 30228, 66948, 25689, 62328, 42489, 53418, 4012, 64058, 35273, 63041, 47365, 49276, 5652, 52878, 51017]

roomclasses = {0:'lvr', 1:'bed', 2:'sto', 3:'kit', 4:'bat', 5:'bal', 6:'out'}

metrics_dict = {}
# Traverse all folders in the current directory
for folder in os.listdir('./T/Z-topology'):
    if os.path.isdir('./T/Z-topology/' + folder) and '-' in folder:
        if len(folder.split('-')) == 2 and folder.split('-')[0].isupper() and folder.split('-')[1].isdigit():
            if int(folder.split('-')[1]) == 1:
                # Construct the full path to the test_metrics.npy file
                file_path = os.path.join('./T/Z-topology/' + folder, 'test_metrics.npy')
                # Check if a file exists
                if os.path.isfile(file_path):
                    # Traversing the vr4stat_i.npy file
                    ged_all = 0
                    gt_room_numbers = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0}
                    pred_room_numbers = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
                    for i in tqdm(range(3000)):
                        if int(test_ids_3000[i][:-4]) in ids_757:
                            file_name = f"vr4stat_{i}.npy"
                            # Load the corresponding gt
                            # [gt_i_points_test, gt_i_edges_test_, d_rev_test, simple_cycles_test, simple_cycles_semantics_test]
                            gt_i = gts[int(test_ids_3000[i][:-4])]
                            file_path = os.path.join('./T/Z-topology/' + folder, file_name)
                            # Loading numpy arrays
                            data = np.load(file_path, allow_pickle=True).item()
                            # Calculate the room adjacency matrix of two graphs (n*n)
                            adjacency_matrix_gts = compute_adjacency_matrix(gt_i[3])
                            adjacency_matrix_data = compute_adjacency_matrix(data['simple_cycles_test'])
                            # Create two graphs
                            gti4 = gt_i[4]
                            G_gt = nx.Graph()
                            for room_i, roomtype in enumerate(gti4):
                                G_gt.add_node(room_i, room_type=roomclasses[roomtype])
                            for room_i in range(len(adjacency_matrix_gts)):
                                for room_j in range(len(adjacency_matrix_gts)):
                                    if room_i < room_j:
                                        if adjacency_matrix_gts[room_i][room_j] == 1:
                                            G_gt.add_edge(room_i, room_j)
                                            G_gt.add_edge(room_j, room_i)

                            G_pred = nx.Graph()
                            for room_i, roomtype in enumerate(data['simple_cycles_semantics_test']):
                                G_pred.add_node(room_i, room_type=roomclasses[roomtype])
                            for room_i in range(len(adjacency_matrix_data)):
                                for room_j in range(len(adjacency_matrix_data)):
                                    if room_i < room_j:
                                        if adjacency_matrix_data[room_i][room_j] == 1:
                                            G_pred.add_edge(room_i, room_j)
                                            G_pred.add_edge(room_j, room_i)
                            ged = nx.graph_edit_distance(G_gt, G_pred, node_subst_cost=node_subst_cost)
                            ged_all += ged


                            # Number of each room category - gt
                            for room_i_class in gti4:
                                gt_room_numbers[room_i_class] += 1
                            # Number of each room category - ours
                            for room_i_class in data['simple_cycles_semantics_test']:
                                pred_room_numbers[room_i_class] += 1


                    ged_all /= 3000
                    ratio_room_numbers_0 = pred_room_numbers[0] / gt_room_numbers[0]
                    ratio_room_numbers_1 = pred_room_numbers[1] / gt_room_numbers[1]
                    ratio_room_numbers_2 = pred_room_numbers[2] / gt_room_numbers[2]
                    ratio_room_numbers_3 = pred_room_numbers[3] / gt_room_numbers[3]
                    ratio_room_numbers_4 = pred_room_numbers[4] / gt_room_numbers[4]
                    ratio_room_numbers_5 = pred_room_numbers[5] / gt_room_numbers[5]
                    # Get the number from the folder name
                    group, number = folder.split('-')
                    # Add data to the dictionary
                    if number not in metrics_dict:
                        metrics_dict[number] = {'ged_all': [], 'r0': [], 'r1': [],'r2': [],'r3': [],'r4': [],'r5': [],}
                    metrics_dict[number]['ged_all'].append(ged_all)
                    metrics_dict[number]['r0'].append(ratio_room_numbers_0)
                    metrics_dict[number]['r1'].append(ratio_room_numbers_1)
                    metrics_dict[number]['r2'].append(ratio_room_numbers_2)
                    metrics_dict[number]['r3'].append(ratio_room_numbers_3)
                    metrics_dict[number]['r4'].append(ratio_room_numbers_4)
                    metrics_dict[number]['r5'].append(ratio_room_numbers_5)

print(f"{'Number':<10}{'GED Average':<20}{'R0 Average':<20}{'R1 Average':<20}{'R2 Average':<20}{'R3 Average':<20}{'R4 Average':<20}{'R5 Average':<20}")
for number, values in sorted(metrics_dict.items(), key=lambda x: int(x[0])):
    avg_GED = np.mean(np.array(values['ged_all']))
    avg_r0 = np.mean(np.array(values['r0']))
    avg_r1 = np.mean(np.array(values['r1']))
    avg_r2 = np.mean(np.array(values['r2']))
    avg_r3 = np.mean(np.array(values['r3']))
    avg_r4 = np.mean(np.array(values['r4']))
    avg_r5 = np.mean(np.array(values['r5']))
    print(f"{number:<10}{avg_GED:<20}{avg_r0:<20}{avg_r1:<20}{avg_r2:<20}{avg_r3:<20}{avg_r4:<20}{avg_r5:<20}")
# Number    GED Average         R0 Average          R1 Average          R2 Average          R3 Average          R4 Average          R5 Average
# 1         0.489625            0.9924193548387097  1.0038921480144405  0.7515243902439024  0.9910351826792964  0.9660234899328859  0.9763545627376427
